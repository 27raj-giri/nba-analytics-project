--
-- Step 1: Database and Table Setup
--
-- First, drop tables if they already exist to ensure a clean start.
DROP TABLE IF EXISTS "Seasons_Stats";
DROP TABLE IF EXISTS "Players";
DROP TABLE IF EXISTS "player_data";

-- Create the 'player_data' table to hold basic player information.
-- A new 'id' column is added as the primary key to handle duplicate names.
CREATE TABLE "player_data" (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255),
    year_start INT,
    year_end INT,
    position VARCHAR(10),
    height VARCHAR(50),
    weight INT,
    birth_date VARCHAR(50),
    college VARCHAR(255)
);

-- Create the 'Players' table. Note: the first column in the CSV is unnamed and contains an index.
-- We will handle this by creating a separate 'player_index' column.
CREATE TABLE "Players" (
    player_index INT,
    player VARCHAR(255),
    height INT,
    weight INT,
    collage VARCHAR(255),
    born INT,
    birth_city VARCHAR(255),
    birth_state VARCHAR(255)
);

-- Create the 'Seasons_Stats' table. This is the largest table with all the stats.
-- Note: 'blanl' and 'blank2' columns are added to match the CSV structure exactly.
CREATE TABLE "Seasons_Stats" (
    row_id INT,
    player_index INT,
    year INT,
    player VARCHAR(255),
    pos VARCHAR(10),
    age INT,
    tm VARCHAR(10),
    g INT,
    gs INT,
    mp INT,
    per FLOAT,
    ts_percent FLOAT,
    "3par" FLOAT,
    ftr FLOAT,
    orb_percent FLOAT,
    drb_percent FLOAT,
    trb_percent FLOAT,
    ast_percent FLOAT,
    stl_percent FLOAT,
    blk_percent FLOAT,
    tov_percent FLOAT,
    usg_percent FLOAT,
    blanl TEXT,
    ows FLOAT,
    dws FLOAT,
    ws FLOAT,
    ws_per_48 FLOAT,
    blank2 TEXT,
    obpm FLOAT,
    dbpm FLOAT,
    bpm FLOAT,
    vorp FLOAT,
    fg INT,
    fga INT,
    fg_percent FLOAT,
    "3p" INT,
    "3pa" INT,
    "3p_percent" FLOAT,
    "2p" INT,
    "2pa" INT,
    "2p_percent" FLOAT,
    efg_percent FLOAT,
    ft INT,
    fta INT,
    ft_percent FLOAT,
    orb INT,
    drb INT,
    trb INT,
    ast INT,
    stl INT,
    blk INT,
    tov INT,
    pf INT,
    pts INT
);

--
-- Step 2: Advanced Analytics Queries
--

-- Query 1: Calculate advanced performance metrics (e.g., PTS per game and REB per game)
-- and rank players based on these metrics for the year 2017.
-- This query uses a common table expression (CTE) and window functions.
WITH PlayerMetrics AS (
    SELECT
        player,
        tm,
        year,
        (CAST(pts AS FLOAT) / g) AS pts_per_game,
        (CAST(trb AS FLOAT) / g) AS trb_per_game,
        per
    FROM "Seasons_Stats"
    WHERE year = 2017 AND g > 10 -- Filter for players with significant games played
)
SELECT
    player,
    tm,
    pts_per_game,
    trb_per_game,
    per,
    RANK() OVER (ORDER BY pts_per_game DESC) as pts_rank,
    RANK() OVER (ORDER BY trb_per_game DESC) as trb_rank,
    RANK() OVER (ORDER BY per DESC) as per_rank
FROM PlayerMetrics
ORDER BY per_rank ASC
LIMIT 10;

-- Query 2: Identify patterns by finding the top 5 players with the highest PER
-- and their colleges. This involves joining tables.
SELECT
    p.name,
    p.college,
    s.year,
    s.per
FROM "Seasons_Stats" s
JOIN "player_data" p ON s.player = p.name
WHERE s.per IS NOT NULL
ORDER BY s.per DESC
LIMIT 5;

-- Query 3: A simple "predictive modeling" example - find players with similar
-- height and weight to a specific player (e.g., LeBron James).
-- This can be used to compare performance or identify potential fits for a team.
SELECT
    p.player,
    p.height AS height_cm,
    p.weight AS weight_kg,
    s.per,
    s.fg_percent,
    s.ast_percent
FROM "Players" p
JOIN "Seasons_Stats" s ON p.player = s.player
WHERE p.height BETWEEN 195 AND 215 -- Similar height range
  AND p.weight BETWEEN 90 AND 120 -- Similar weight range
  AND s.year = 2017 -- Limiting to a specific year for a clear comparison
ORDER BY s.per DESC
LIMIT 10;

--
-- Step 3: Additional Queries (Basic to Advanced)
--

-- Basic Query: Find all players who played for the Chicago Bulls (CHI) in 2017.
-- This demonstrates a simple SELECT with a WHERE clause.
SELECT player, pos, age, g, pts
FROM "Seasons_Stats"
WHERE tm = 'CHI' AND year = 2017;

-- Intermediate Query (Aggregation): Find the average height and weight of players for each position.
-- This uses GROUP BY and aggregate functions like AVG().
SELECT
    s.pos,
    AVG(p.height) AS avg_height_cm,
    AVG(p.weight) AS avg_weight_kg
FROM "Seasons_Stats" s
JOIN "Players" p ON s.player = p.player
GROUP BY s.pos
ORDER BY avg_height_cm DESC;

-- Intermediate Query (Subquery): Find all players who scored more than the average points per game in 2017.
-- This uses a subquery to calculate the average points per game for the year first.
SELECT player, tm, CAST(pts AS FLOAT) / g AS pts_per_game
FROM "Seasons_Stats"
WHERE year = 2017 AND CAST(pts AS FLOAT) / g > (
    SELECT AVG(CAST(pts AS FLOAT) / g)
    FROM "Seasons_Stats"
    WHERE year = 2017 AND g > 10
)
ORDER BY pts_per_game DESC;

-- Advanced Query (Window Function): Rank players within their team by PER for the 2017 season.
-- This uses PARTITION BY within a window function to create rankings per team.
SELECT
    player,
    tm,
    per,
    RANK() OVER (PARTITION BY tm ORDER BY per DESC) as team_per_rank
FROM "Seasons_Stats"
WHERE year = 2017 AND per IS NOT NULL
ORDER BY tm, team_per_rank
LIMIT 20;

-- Advanced Query (Complex Join & Aggregation): Find the top 5 players from a specific college
-- based on their total career points, using a CTE.
WITH CollegeStats AS (
    SELECT
        s.player,
        SUM(s.pts) AS total_career_points
    FROM "Seasons_Stats" s
    JOIN "player_data" p ON s.player = p.name
    WHERE p.college = 'University of North Carolina'
    GROUP BY s.player
)
SELECT
    player,
    total_career_points
FROM CollegeStats
ORDER BY total_career_points DESC
LIMIT 5;
